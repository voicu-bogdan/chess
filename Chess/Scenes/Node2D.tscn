[gd_scene load_steps=8 format=2]

[ext_resource path="res://Scripts/Main.gd" type="Script" id=1]
[ext_resource path="res://Assets/Pieces Black/black_bishop.png" type="Texture" id=2]
[ext_resource path="res://Assets/Board/board.png" type="Texture" id=3]
[ext_resource path="res://Assets/Board/text.png" type="Texture" id=4]
[ext_resource path="res://Assets/Board/numbers.png" type="Texture" id=5]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

uniform bool is_on = false;

void vertex() {
	if (is_on) {
		if (add_margins) {
			VERTEX += (UV * 2.0 - 1.0) * width;
		}	
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (is_on) {
		if (add_margins) {
			vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
			
			uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
			
			if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
				COLOR.a = 0.0;
			} else {
				COLOR = texture(TEXTURE, uv);
			}
		} else {
			COLOR = texture(TEXTURE, uv);
		}
		
		if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
			COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
			COLOR.a += (1.0 - COLOR.a) * color.a;
		}
	} else {
		COLOR = texture(TEXTURE, UV);
	}
	
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/color = Color( 0.847059, 0.627451, 0.584314, 1 )
shader_param/width = 1.0
shader_param/pattern = 0
shader_param/inside = false
shader_param/add_margins = true
shader_param/is_on = false

[node name="Main" type="Node2D"]
script = ExtResource( 1 )

[node name="ColorRect" type="ColorRect" parent="."]
margin_left = -512.0
margin_top = -304.0
margin_right = 512.0
margin_bottom = 304.0
color = Color( 0.133333, 0.133333, 0.133333, 1 )

[node name="Camera2D" type="Camera2D" parent="."]
current = true

[node name="BoardGrid" type="GridContainer" parent="."]
margin_left = -176.0
margin_top = -176.0
margin_right = 176.0
margin_bottom = 176.0
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/vseparation = 0
custom_constants/hseparation = 0
columns = 8

[node name="Board" type="Node2D" parent="."]

[node name="Grid" type="Sprite" parent="Board"]
scale = Vector2( 2, 2 )
texture = ExtResource( 3 )

[node name="Text" type="Sprite" parent="Board"]
position = Vector2( 0, 200 )
scale = Vector2( 2, 2 )
texture = ExtResource( 4 )

[node name="Numbers" type="Sprite" parent="Board"]
position = Vector2( 200, 0 )
scale = Vector2( 2, 2 )
texture = ExtResource( 5 )

[node name="Pawns" type="Node2D" parent="."]

[node name="Sprite" type="Sprite" parent="Pawns"]
material = SubResource( 2 )
position = Vector2( -22, -22 )
scale = Vector2( 2, 2 )
texture = ExtResource( 2 )
